@page "/auth"

@using CloudinaryDotNet.Actions
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using XForms.Data
@using Size = MudBlazor.Size

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

@attribute [Authorize]

<PageTitle>Auth</PageTitle>


<MudText Typo="Typo.h3" GutterBottom="true">You are authenticated!</MudText>

<MudText Typo="Typo.body2"  GutterBottom="true"></MudText>

<div class="d-flex gap-4 align-center">
    @if (_avatarUrl is not null)
    {
        <MudAvatar Size="Size.Medium">
            <MudImage Src="@_avatarUrl"></MudImage>
        </MudAvatar>
    }
    else
    {
        <MudAvatar Size="Size.Medium">
            <MudIcon Color="Color.Default" Icon="@Icons.Material.Filled.Person"/>
        </MudAvatar>
    }
    <MudText>Hello @_displayName</MudText>
    <MudText>@string.Join(",", _userRoles)</MudText>
</div>

@code
{
    private string _displayName = string.Empty;
    private List<string> _userRoles = [];
    private string? _avatarUrl;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);
        
        if (user != null)
        {
            _displayName = user.DisplayName;
            _avatarUrl = user.AvatarUrl;
        }

        _userRoles = (await UserManager.GetRolesAsync(user)).ToList();
    }
}
