@page "/Account/Register"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using XForms.Data
@using XForms.Components.Account.Pages

@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Small" Class="pt-15">
    <MudCard Elevation="3" Class="pa-10 rounded-lg">
        <MudCardHeader>
            <MudText Typo="Typo.h3">Create a new account</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (!string.IsNullOrEmpty(_errorMessage))
            { 
                <MudAlert Severity="Severity.Error" Class=" mb-3">@_errorMessage</MudAlert>
            }
            <EditForm Model="Input" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator/>

                <MudGrid>
                    <MudItem xs="12">
                        <MudStaticTextField Label="Display Name"
                                            @bind-Value="Input.DisplayName"
                                            For="@(() => Input.DisplayName)"
                                            Placeholder="John Doe"
                                            UserAttributes="@(new Dictionary<string, object?>() { { "autocomplete", "username" }, { "aria-required", "true" } })"/>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="Email"
                                      @bind-Value="Input.Email"
                                      For="@(() => Input.Email)"
                                      Placeholder="example@gmail.com"
                                      UserAttributes="@(new Dictionary<string, object?>() { { "autocomplete", "username" }, { "aria-required", "true" } })"/>
                    </MudItem>

                    <MudItem xs="12">
                        <AvatarUpload @bind-AvatarUrl="Input.AvatarUrl"/>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="Password"
                                      @bind-Value="Input.Password"
                                      For="@(() => Input.Password)"
                                      InputType="InputType.Password"/>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="Confirm Password"
                                      @bind-Value="Input.ConfirmPassword"
                                      For="@(() => Input.ConfirmPassword)"
                                      InputType="InputType.Password"/>
                    </MudItem>

                    <MudItem xs="12">
                        <MudStaticButton
                            FormAction="FormAction.Submit"
                            Variant="Variant.Filled"
                            Color="Color.Primary"
                            Size="Size.Large"
                            FullWidth="true"
                            Disabled="@_isProcessing">
                            @if (_isProcessing)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2"/>
                                <span>Processing</span>
                            }
                            else
                            {
                                <span>Register</span>
                            }
                        </MudStaticButton>
                    </MudItem>
                </MudGrid>
            </EditForm>
        </MudCardContent>
        <MudCardActions Class="justify-center mb-4">
            <MudLink Href="/Account/Login">Already have an account? Login</MudLink>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {
    [SupplyParameterFromForm] 
    private RegisterModel Input { get; set; } = new();

    private bool _isProcessing;
    private string? _errorMessage; 

    private async Task RegisterUser(EditContext editContext)
    {
        try
        {
            _isProcessing = true;

            var user = new ApplicationUser()
            {
                DisplayName = Input.DisplayName,
                AvatarUrl = Input.AvatarUrl,
                Email = Input.Email,
                UserName = Input.Email
            };
            
            var result = await UserManager.CreateAsync(user, Input.Password);

            if (!result.Succeeded)
            {
                _errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
                return;
            }

            Snackbar.Configuration.PositionClass = "Bottom-Start";
            Snackbar.Add("Account Created", Severity.Success);
            Logger.LogInformation("User created a new account with password.");

            await Task.Delay(2000);

            // await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo("/Account/Login");

        }
        catch(Exception e)
        {
            _errorMessage = $"An error occurred: {e.Message}";
        }
        finally
        {
            _isProcessing = false; 
            StateHasChanged();
        }

    }
    
    public sealed class RegisterModel
    {
        [Required]
        [MaxLength(100, ErrorMessage = "Name must be within 100 characters")]
        public string DisplayName { get; set; } = string.Empty;
        
        [DataType(DataType.ImageUrl)]
        public string? AvatarUrl { get; set; }

        [Required]
        [DataType(DataType.EmailAddress)] 
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        [Required]
        [Compare("Password", ErrorMessage = "Passwords don't match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}